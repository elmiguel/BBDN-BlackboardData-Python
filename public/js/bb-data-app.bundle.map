{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./client/ts/bb-data-app.ts","webpack:///./client/ts/bb-data-variables.ts","webpack:///./client/ts/components/bb-data-basic-table.ts","webpack:///./client/ts/core/bb-data-abstract-class.ts","webpack:///./client/ts/core/bb-data-service.ts","webpack:///./client/ts/core/bb-data-state.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","customElements","define","bbDataDemo","window","document","getElementById","queries","querySelectorAll","console","log","forEach","el","idx","parent","addEventListener","e","preventDefault","btn","target","config","JSON","parse","dataset","queryConfig","setAttribute","queryname","bbDataVars","host","BbDataBasicTableComponent","super","bbDataService","unsubscribe","rxjs","Subject","this","template","attachShadow","shadowRoot","appendChild","content","cloneNode","queryName","getAttribute","select","type","format","data","runQuery","dataState","pipe","operators","takeUntil","filter","switchMap","subscribe","updateState","updateTable","next","attrName","oldVal","newVal","table","querySelector","dataTable","simpleDatatables","DataTable","columns","BbDataAbstractClass","HTMLElement","self","irsc","constructor","observedAttributes","length","attribute","test","pascalCase","attrValue","removeAttribute","oldValue","newValue","slot","titleize","innerText","split","map","part","join","charAt","toUpperCase","slice","BbDataService","bbDataUrl","bbdata","PathwayService","params","url","BehaviorSubject","of","fetch","then","res","json","catch","err","_data","from","BbDataState","_unsubscribe","state","_state","pluck"],"mappings":"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","file":"public/js/bb-data-app.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./client/ts/bb-data-app.ts\");\n","declare var window: Window & typeof globalThis;\ndeclare var simpleDatatables: any;\n\nimport { BbDataBasicTableComponent } from './components/bb-data-basic-table';\n\ncustomElements.define('bb-data-table-basic', BbDataBasicTableComponent);\n// console.log('created irsc custom elements...');\nconst bbDataDemo = window.document.getElementById('bb-data-demo');\n\nconst queries = window.document.querySelectorAll('.query');\nconsole.log(queries);\n// tslint:disable-next-line:only-arrow-functions\nqueries.forEach(function(el, idx, parent) {\n    console.log(el, idx, parent);\n    // tslint:disable-next-line: only-arrow-functions\n    el.addEventListener('click', function(e) {\n        e.preventDefault();\n        const btn: any = e.target;\n        const config = JSON.parse(btn.dataset.queryConfig);\n        console.log(config);\n        bbDataDemo.setAttribute('queryname', config.queryname);\n    });\n});\n","export const bbDataVars: any = {\n    host: 'http://localhost:5000'\n};\n","declare var rxjs: any;\ndeclare var simpleDatatables: any;\nimport { BbDataAbstractClass } from '../core/bb-data-abstract-class';\nimport { BbDataService, IBbData } from '../core/bb-data-service';\nimport { BbDataState, IBbDataState } from '../core/bb-data-state';\nexport class BbDataBasicTableComponent extends BbDataAbstractClass {\n    static get observedAttributes() {\n        return ['queryname', 'select', 'type', 'format'];\n    }\n    private data: any; // BehaviorSubject()\n    private table: any;\n    private dataTable: any;\n    private bbDataService: BbDataService = new BbDataService();\n    private unsubscribe: any = new rxjs.Subject();\n    private template: any;\n    private queryName: string;\n    private select: string;\n    private type: string;\n    private format: string;\n    private dataState: IBbDataState;\n\n    constructor() {\n        super();\n        // ts can be annoying, se we create a reference to this class\n        // slots getters and setters are dynamically added to the class\n        // so creating self at the top level will reference the current element state\n        // remove this comment if you are experiencing issue with access slots\n        // then reference this.self[slotName] instead of this.slotName\n        // const self: any = this;\n\n        // this.template = window.document.createElement('table');\n        this.template = window.document.getElementById(\n            'bb-data-table-basic-tmpl'\n        );\n        // console.log('[Bb Data Table - Basic Loaded]');\n        this.attachShadow({ mode: 'open' });\n        // this.shadowRoot.appendChild(this.template);\n        this.shadowRoot.appendChild(this.template.content.cloneNode(true));\n        this.queryName = this.getAttribute('queryName');\n        this.select = this.getAttribute('select');\n        this.type = this.getAttribute('type');\n        this.format = this.getAttribute('format');\n        // console.log(`[queryName] ${this.queryName}`);\n        // this.updateTable({});\n        this.data = this.bbDataService.runQuery(this.queryName);\n        this.dataState = new BbDataState(this.queryName);\n    }\n\n    public connectedCallback() {\n        this.data\n            .pipe(\n                rxjs.operators.takeUntil(this.unsubscribe),\n                rxjs.operators.filter((data: IBbData) => data !== null),\n                rxjs.operators.switchMap(async (data: IBbData) => {\n                    // mutate the state if needed then return the new state\n                    // const _state: IBbDataState = { ...data };\n                    // return _state;\n                    // for now just return the data as state as we do not know what data\n                    // we are returning, return as a copy for demostrative purposes\n                    return data;\n                })\n            )\n            .subscribe((data: IBbData) => {\n                // console.log('[this.data.pipe.subscribe]', data);\n                this.dataState.updateState(data);\n                this.updateTable(data);\n\n                // if you want this to be one-time and not streamed this disconnect...\n                // this.disconnectedCallback();\n            });\n\n        // this.dataState.subscribe((data: any) => this.dataTable.import(data));\n    }\n\n    public disconnectedCallback() {\n        this.unsubscribe.next();\n    }\n\n    // Called anytime the 'selected' attribute is changed\n    // BbDataAbstractClass contains this function, so consider\n    // this as an override\n    public attributeChangedCallback(attrName: any, oldVal: any, newVal: any) {\n        if (oldVal !== newVal) {\n            console.log(attrName, oldVal, newVal);\n            if (attrName === 'queryname' && newVal !== null) {\n                this.data = this.bbDataService.runQuery(newVal);\n                this[attrName] = newVal;\n            }\n        }\n    }\n\n    public updateTable(data: any) {\n        // this.dataTable.import(data);\n        // console.log(this.table);\n\n        this.table = this.shadowRoot.querySelector('table');\n        this.dataTable = new simpleDatatables.DataTable(this.table, {\n            data,\n            columns: [\n                {\n                    select: +this.select,\n                    type: this.type,\n                    format: this.format\n                }\n            ]\n        });\n    }\n}\n","declare var window: any;\nexport class BbDataAbstractClass extends HTMLElement {\n    // tslint:disable-next-line:cognitive-complexity\n    constructor() {\n        super();\n\n        const self: any = this;\n        // Check to see if observedAttributes are defined and has length\n        if (!window.irsc) {\n            window.irsc = {};\n        }\n        if (\n            self.constructor.observedAttributes &&\n            self.constructor.observedAttributes.length\n        ) {\n            // Loop through the observed attributes\n            self.constructor.observedAttributes.forEach((attribute: any) => {\n                if (attribute !== 'data') {\n                    if (/[-]/gim.test(attribute)) {\n                        attribute = this.pascalCase(attribute);\n                    }\n                    // console.log(attribute);\n                    // Dynamically define the property getter/setter d\n                    Object.defineProperty(this, attribute, {\n                        get() {\n                            return this.getAttribute(attribute);\n                        },\n                        set(attrValue) {\n                            if (attrValue) {\n                                this.setAttribute(attribute, attrValue);\n                            } else {\n                                this.removeAttribute(attribute);\n                            }\n                        }\n                    });\n                }\n            });\n        }\n    }\n\n    public attributeChangedCallback(\n        attrName: string,\n        oldValue: any,\n        newValue: any\n    ) {\n        const slot: any = this[\n            `slot${this.titleize(this.pascalCase(attrName))}`\n        ];\n\n        if (slot) {\n            slot.innerText = newValue;\n        }\n    }\n\n    private pascalCase(attribute: string) {\n        return attribute\n            .split('-')\n            .map((part: string, idx: number) => {\n                if (idx === 0) {\n                    return part;\n                }\n                return this.titleize(part);\n            })\n            .join('');\n    }\n\n    private titleize(part: string) {\n        return part.charAt(0).toUpperCase() + part.slice(1);\n    }\n}\n","declare var window: any;\ndeclare var rxjs: any;\nimport { bbDataVars } from '../bb-data-variables';\nexport interface IBbData {\n    [key: string]: any;\n}\n\nexport class BbDataService {\n    // tslint:ignore\n    public bbdata: any;\n    private unsubscribe: any = new rxjs.Subject();\n    private bbDataUrl: string = `${bbDataVars.host}/queries`;\n\n    constructor() {\n        // console.(this.http);\n        if (!window.hasOwnProperty('bbdata')) {\n            window.bbdata = {};\n        }\n\n        if (!window.irsc.hasOwnProperty('BbDataService')) {\n            window.irsc.PathwayService = this;\n        }\n\n        this.bbdata = window.bbdata;\n    }\n\n    public runQuery(queryName: string, params: any = null) {\n        if (queryName === 'test' || queryName === '') {\n            const url = `${bbDataVars.host}/test`;\n            return new rxjs.BehaviorSubject(\n                rxjs.of(\n                    fetch(url)\n                        .then((res: any) => res.json())\n                        .catch((err: any) => {\n                            console.log(\n                                'There was a problem loading test query.....'\n                            );\n                            console.log(err);\n                        })\n                )\n            ).pipe(rxjs.operators.switchMap((_data: any) => _data));\n        }\n\n        if (!this.bbdata.hasOwnProperty(queryName)) {\n            this.bbdata[queryName] = null;\n            const data = fetch(`${this.bbDataUrl}/${queryName}`)\n                .then((res: any) => res.json())\n                .then((res: any) => {\n                    // do something with data then return data\n                    // TODO: do something with data and return new data\n                    return res;\n                })\n                .catch((err: any) => {\n                    console.log(\n                        `There was an error in retrieving data with queryName: ${queryName}`\n                    );\n                    console.log(err);\n                });\n            // this.bbdata.set(queryName, new rxjs.BehaviorSubject(data));\n            // this.bbdata.set(queryName, new rxjs.BehaviorSubject(data));\n            this.bbdata[queryName] = new rxjs.BehaviorSubject(data);\n        }\n        // console.log(this.bbdata);\n        // return this.bbdata.get(queryName).pipe(\n        return this.bbdata[queryName].pipe(\n            rxjs.operators.takeUntil(this.unsubscribe),\n            rxjs.operators.switchMap((data: any) => rxjs.from(data))\n        );\n    }\n\n    public disconnectedCallback() {\n        this.unsubscribe.next(null);\n    }\n}\n","declare var rxjs: any;\nexport interface IBbDataState {\n    [key: string]: any;\n}\nexport class BbDataState {\n    public state: any;\n    private _unsubscribe: any = new rxjs.Subject();\n    constructor(queryName: string) {\n        // setup _state filtering...\n        const INITIAL_STATE: IBbDataState = {};\n        this.state = new rxjs.BehaviorSubject(INITIAL_STATE).pipe(\n            rxjs.operators.filter(\n                (_state: IBbDataState) => _state && _state[queryName]\n            )\n        );\n    }\n\n    public updateState(state: IBbDataState) {\n        // console.log(`[BbDataState.updateState()]`, state);\n        this.state.next(state);\n    }\n\n    public getStateSlice(slice: string) {\n        // console.log(`[BbDataState.getStateSlice()]`, slice);\n        return this.state.pipe(rxjs.operators.pluck(slice));\n    }\n\n    public freeze() {\n        this._unsubscribe.next(null);\n    }\n}\n"],"sourceRoot":""}